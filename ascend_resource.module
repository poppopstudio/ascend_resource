<?php

/**
 * @file
 * Contains hook implementations for the Ascend resource module.
 */

use Drupal\ascend_resource\Hook\ResourceHooks;
use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\views\Entity\View;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Hook\LegacyHook;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Render\Element;
use Drupal\taxonomy\Entity\Vocabulary;

/**
 * Implements hook_entity_view_alter().
 */
function ascend_resource_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {

  /** For Category taxonomy terms.
   *  - show the Resources embed view for leaf terms.
   *  - show the Category children embed view for node terms.
   */

  if ($entity->getEntityTypeId() === 'taxonomy_term'
    && $entity->bundle() === 'category'
    && $display->getMode() == 'default') {  // NB!

    $term_id = (int) $entity->id();

    // Display the Category's children terms.
    if (_ascend_resource_term_has_children($term_id)) {
      $build['category_child_terms'] = views_embed_view('category_child_terms', 'embed_1', $term_id);
      $build['category_child_terms']['#weight'] = 25;
    }

    // Display the Category's resources view.
    else {
      $build['category_resources'] = views_embed_view('category_resources', 'embed_1', $term_id);
      $build['category_resources']['#weight'] = 25;
    }
  }
}

function _ascend_resource_term_has_children(int $tid) {
  $query = \Drupal::entityQuery('taxonomy_term')
    ->condition('parent', $tid)
    ->accessCheck(TRUE)
    ->count(); // We only need to know if there's some, or none.
  return $query->execute();
}

/**
 * Legacy hook implementation.
 *
 * @todo Remove this method when support for Drupal core < 11.1 is dropped.
 */
#[LegacyHook]
function ascend_resource_taxonomy_term_presave(EntityInterface $entity) {
  // Base field overrides required to set text_format, BUT...
  // They don't work without the UI, so we have to force at save (import) time.
  if ($entity->bundle() === 'category') {
    $description = $entity->description;
    if (!empty($description->value) && empty($description->format)) {
      $description->format = 'plain_text';
    }
  }
}


/* HOOKY HOOKS! */

/**
 * Legacy hook implementation.
 *
 * @todo Remove this method when support for Drupal core < 11.1 is dropped.
 */
#[LegacyHook]
function ascend_resource_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Does nothing
  \Drupal::service(ResourceHooks::class)->formAlter($form, $form_state, $form_id);
}

/**
 * Legacy hook implementation.
 *
 * @todo Remove this method when support for Drupal core < 11.1 is dropped.
 */
#[LegacyHook]
function ascend_resource_tokens_alter(array &$replacements, array $context, BubbleableMetadata $bubbleable_metadata) {
  // Convert term description token to string and strip html tags.
  // Without this, term desc is wrapped in a <p> tag.
  if ($context['type'] == 'term') {
    if (isset($replacements['[term:description]'])) {
      $desc = (string) $replacements['[term:description]'];
      $desc = strip_tags($desc);
      $replacements['[term:description]'] = $desc;
    }
  }
}


/* THEME BASED */

/**
 * Legacy hook implementation.
 *
 * @todo Remove this method when support for Drupal core < 11.1 is dropped.
 */
#[LegacyHook]
function ascend_resource_gin_content_form_routes(): array {
  return [
    // Resource custom entity type edit form handled by gin (to get sidebar).
    'entity.resource.add_form',
    'entity.resource.edit_form',
  ];
}

/**
 * These two function were required in order to add compatibility with
 *  field_group module. This also necessitated the resource.html.twig template.
 *  https://www.drupal.org/project/field_group/issues/2859858
 */

/**
 * Legacy hook implementation.
 *
 * @todo Remove this method when support for Drupal core < 11.1 is dropped.
 */
#[LegacyHook]
function ascend_resource_theme($existing, $type, $theme, $path) {
  return [
    'resource' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Legacy hook implementation.
 *
 * @todo Remove this method when support for Drupal core < 11.1 is dropped.
 */
#[LegacyHook]
function template_preprocess_resource(&$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];

  // Helpful $content variable for templates.
  $variables += ['content' => []];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}


/* UN/INSTALL */

/**
 * Implements hook_install().
 */
#[LegacyHook]
function ascend_resource_install() {
  // $views = ['taxonomy_term', ]; // needed for 'actual' install.
  // $views += ['comments_recent', 'content_recent', 'frontpage', 'who_s_new', 'who_s_online']; // put elsewhere

  // foreach ($views as $disable_view) {
  //   $view = View::load($disable_view);
  //   if ($view) {
  //     $view->disable();
  //     $view->save();
  //   }
  // }
}

/**
 * Legacy hook implementation.
 *
 * @todo Remove this method when support for Drupal core < 11.1 is dropped.
 */
#[LegacyHook]
function ascend_resource_uninstall() {

  // DEV ONLY - Config delete
  // $views = ['category_parent_terms', 'resource_search', ];
  $views = ['resource_search', ];
  // foreach ($views as $view) {
  //   \Drupal::service('config.factory')->getEditable('views.view.' . $view)->delete();
  // }

  $vocabs = ['category', 'pricing', 'stage', 'standards']; // factor out into const?
  foreach ($vocabs as $vocab) {
    if ($vocabulary = Vocabulary::load($vocab)) {
      $vocabulary->delete();
    }
  }

  $config = [
    'block.block.ascend_categories_block',
    'block.block.ascend_resource_search_term',
    'core.base_field_override.taxonomy_term.category.description',
    'core.entity_form_display.taxonomy_term.category.default',
    'core.entity_view_display.taxonomy_term.category.default',
    'field.field.taxonomy_term.category.ascend_standards',
    'field.storage.taxonomy_term.ascend_standards',
    'views.view.category_child_terms',
    'views.view.category_parent_terms',
    'views.view.category_resources',
    'views.view.resource_needed',
  ];

  foreach ($config as $item) {
    \Drupal::service('config.factory')->getEditable($item)->delete();
  }
}
